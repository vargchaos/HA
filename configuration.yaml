# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

alert: !include alerts.yaml
automation: !include automations.yaml
automation blackouts: !include automations_blackout.yaml
automation climats: !include automations_climat.yaml
input_text: !include input_text.yaml
input_datetime: !include input_datetime.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

python_script:

climate:
  - platform: smartir
    name: Кондіціонер у вітальні
    unique_id: livingroom_ac
    device_code: 1522
    controller_data:
      controller_type: Broadlink
      remote_entity: remote.broadlink_rc4c_mini
      delay_secs: 0.5
      num_repeats: 2
    temperature_sensor: sensor.termometr_temperature
    humidity_sensor: sensor.termometr_humidity
    power_sensor: switch.smart_plug_socket_1

sensor:
  # Історична статистика для даних роутера Xiaomi
  - platform: history_stats
    name: "Отримані дані за сьогодні (Gb)"
    entity_id: sensor.miwifi_router_data_received
    state: 'Gb'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: "Відвантажені дані за сьогодні (Gb)"
    entity_id: sensor.miwifi_router_data_sent
    state: 'Gb'
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  # Шаблонний сенсор для загального споживання електроенергії з мережі
  - platform: template
    sensors:
      total_grid_power:
        friendly_name: "Загальне споживання з мережі"
        unit_of_measurement: 'W'
        device_class: energy
        value_template: >
          {{ states('sensor.rozetka_konditsionera_local_zhivlennia') | float(0) +
             states('sensor.rozetka_kholodilnika_local_zhivlennia') | float(0) +
             states('sensor.rozetka_cheamagro_local_zhivlennia') | float(0) +
             states('sensor.rozetka_life_local_zhivlennia') | float(0) +
             states('sensor.delta_2_total_in_power') | float(0) }}

  # Інтеграція для підрахунку загальної спожитої енергії з мережі
  - platform: integration
    source: sensor.total_grid_power
    name: "Споживання енергії з мережі"
    unit_prefix: k
    round: 2
    unit_time: h
    method: left

  # Сенсори для акумулятора Delta 2
  - platform: template
    sensors:
      ac_in_power:
        friendly_name: "AC потужність зарядки"
        unit_of_measurement: 'W'
        device_class: power
        value_template: "{{ states('sensor.delta_2_ac_in_power') | float(0) }}"
      
      ac_out_power:
        friendly_name: "AC потужність на виході"
        unit_of_measurement: 'W'
        device_class: power
        value_template: "{{ states('sensor.delta_2_ac_out_power') | float(0) }}"

      battery_level:
        friendly_name: "Рівень заряду батареї"
        unit_of_measurement: '%'
        device_class: battery
        value_template: "{{ states('sensor.delta_2_battery_level') | float(0) }}"

      solar_in_power:
        friendly_name: "Сонячна енергія (вхід)"
        unit_of_measurement: 'W'
        device_class: power
        value_template: "{{ states('sensor.delta_2_solar_in_power') | float(0) }}"

  # Інтеграція для підрахунку енергії, що надходить з сонячної системи
  - platform: integration
    source: sensor.delta_2_solar_in_power
    name: "Згенерована сонячна енергія"
    unit_prefix: k
    round: 2
    unit_time: h
    method: left

  # Інтеграція для підрахунку енергії, що йде до акумулятора
  - platform: integration
    source: sensor.delta_2_ac_in_power
    name: "Енергія, що надходить в акумулятор"
    unit_prefix: k
    round: 2
    unit_time: h
    method: left

  # Інтеграція для підрахунку енергії, що виходить з акумулятора
  - platform: integration
    source: sensor.delta_2_ac_out_power
    name: "Енергія, що виходить з акумулятора"
    unit_prefix: k
    round: 2
    unit_time: h
    method: left

  # Сенсори для середнього та максимального значення напруги
  - platform: template
    sensors:
      average_voltage:
        friendly_name: "Середня напруга"
        value_template: >
          {{ ((states('sensor.rozetka_konditsionera_local_napruga')|float +
              states('sensor.rozetka_kholodilnika_local_napruga')|float +
              states('sensor.rozetka_cheamagro_local_napruga')|float +
              states('sensor.rozetka_life_local_napruga')|float) / 4) | round(2) }}
        unit_of_measurement: "v"

      max_voltage:
        friendly_name: "Максимальна напруга"
        value_template: >
          {{ [states('sensor.rozetka_konditsionera_local_napruga')|float,
              states('sensor.rozetka_kholodilnika_local_napruga')|float,
              states('sensor.rozetka_cheamagro_local_napruga')|float,
              states('sensor.rozetka_life_local_napruga')|float] | max }}
        unit_of_measurement: "v"


telegram_bot:
  - platform: polling
    api_key: "7879913057:AAEaaRUPFs0NWGZreoqj-i3y5INmRGgQLgc"
    allowed_chat_ids:
      - 254266061

notify:
  - name: telegram
    platform: telegram
    chat_id: 254266061
